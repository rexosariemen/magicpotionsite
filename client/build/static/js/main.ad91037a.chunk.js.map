{"version":3,"sources":["formValidation.js","components/Contact.js","components/MagicPotionContainer.js","App.js","serviceWorker.js","index.js"],"names":["isNumber","val","isNaN","validate","stateObj","quantity","fName","lName","add1","city","state","zip","email","phoneNumber","card","exp","errors","firstName","lastName","ccNum","touched","length","street1","address","split","test","payment","cardNumber","cardType","inputtxt","MasterCardnumber","AmexCardnumber","DiscoverCardnumber","DinerClubCardnumber","JCBCardnumber","validCard","expDate","validateExpiryDate","s","b","d","Date","c","getFullYear","ContactComponent","initialState","total","street2","exceedMaxQuantiy","successOrder","badOrder","handleChange","e","target","name","value","setState","toString","Object","keys","includes","handleFormReset","isErrors","array","every","el","handleSubmit","preventDefault","formData","phone","values","axios","post","then","forceUpdate","catch","err","response","status","console","log","statusMessage","handleBlur","field","this","className","onSubmit","src","height","alt","htmlFor","type","id","max","required","invalid","onBlur","onChange","readOnly","placeholder","Component","MagicPotion","Contact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ad91037a.chunk.js","sourcesContent":["/**\n * Form validation module\n */\n// const required = val => val && val.length;\n// const maxLength = len => val => !val || (val.length <= len);\n// const minLength = len => val => val && (val.length >= len);\nconst isNumber = val => !isNaN(+val);\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nexport const validate = (\n  stateObj, quantity, fName, lName, add1, city, state, zip, email, phoneNumber, card, exp\n  ) => {\n  const errors = {\n    quantity: '',\n    firstName: '',\n    lastName: '',\n    add1: '',\n    city: '',\n    state: '',\n    zip: '',\n    email: '',\n    phoneNumber: '',\n    ccNum: '',\n    exp: '',\n  };\n\n  if (stateObj.touched.quantity) {\n    if (!isNumber(quantity)) errors.quantity = 'Quantity of potion must be a number.';\n    if (quantity < 1) errors.quantity = 'Must add at least 1 Potion.';\n    if (quantity > 3) errors.quantity = 'Only maximum of 3 potions are allowed.'\n  }\n\n  if (stateObj.touched.firstName) {\n    if (fName.length < 2) {\n      errors.firstName = 'First name must be at least 2 characters.';\n    } else if (fName.length > 15) {\n      errors.firstName = 'First name must be 15 or less characters.';\n    }\n  }\n  if (stateObj.touched.lastName) {\n    if (lName.length < 2) {\n      errors.lastName = 'Last name must be at least 2 characters.';\n    } else if (lName.length > 15) {\n      errors.lastName = 'Last name must be 15 or less characters.';\n    }\n  }\n\n  // address line 1\n  if (stateObj.touched.street1) {\n    if (stateObj.address.street1.split(' ').length < 3) {\n      errors.add1 = 'Please provide a valid street address.';\n    } \n  }\n\n  // city\n  if (stateObj.touched.city) {\n    if (city.length < 2) {\n      errors.city = 'Please provide a valid city name.';\n    } \n  }\n\n  // state\n  if (stateObj.touched.state) {\n    if (!state) errors.state = 'Select your state.'\n  }\n\n  // validation for zip code\n  if (stateObj.touched.zip) {\n    if (!isNumber(zip)) errors.zip = 'Zip Code should be a number.'\n    if (zip.length < 5 || zip.length > 5) errors.zip = 'Invalid Zip Code.'\n  }\n\n  // email address validation\n  if (stateObj.touched.email) {\n    if (!validEmail(email)) errors.email = 'Please provide a valid email address.'\n  }\n\n  const reg1 = /(?:(?:(\\s*\\(?([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\)?\\s*(?:[.-]\\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})/\n  // const reg = /^[0-9+()#.\\sext-]+$/;\n  if (stateObj.touched.phoneNumber && (!reg1.test(phoneNumber) )) {\n    errors.phoneNumber = 'Please use only valid phone characters: digits, parenthesis, dashes, plus, space, pound, asterisk, period, comma, or the letters e, x, t.';\n  }\n\n  // validate cardNumber\n  if (stateObj.touched.ccNum) {\n    const card = stateObj.payment.ccNum;\n    if (!card) {\n      errors.ccNum = 'Please provide your card number.'\n    } else if (!validCard(card)) {\n      errors.ccNum = 'Please enter a valid card number.'\n    }\n  }\n\n  // validate expiration\n  if (stateObj.touched.exp) {\n    const expDate = stateObj.payment.exp;\n    if (!expDate) { \n      errors.exp = 'Please provide the expiration date on your card';\n    } else\n    if (validateExpiryDate(expDate) !== true) {\n      errors.exp += validateExpiryDate(expDate);\n    };\n  }\n  return errors;\n}\n\n\n\n// Card Types Check to validate payment card:\nfunction AmexCardnumber(inputtxt) {\n  var cardno = /^(?:3[47][0-9]{13})$/;\n  return cardno.test(inputtxt);\n}\n\nfunction VisaCardnumber(inputtxt) {\n  var cardno = /^(?:4[0-9]{12}(?:[0-9]{3})?)$/;\n  return cardno.test(inputtxt);\n}\n\nfunction MasterCardnumber(inputtxt) {\n  var cardno = /^(?:5[1-5][0-9]{14})$/;\n  return cardno.test(inputtxt);\n}\n\nfunction DiscoverCardnumber(inputtxt) {\n  var cardno = /^(?:6(?:011|5[0-9][0-9])[0-9]{12})$/;\n  return cardno.test(inputtxt);\n}\n\nfunction DinerClubCardnumber(inputtxt) {\n  var cardno = /^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$/;\n  return cardno.test(inputtxt);\n}\n\nfunction JCBCardnumber(inputtxt) {\n  var cardno = /^(?:(?:2131|1800|35\\d{3})\\d{11})$/;\n  return cardno.test(inputtxt);\n}\n\nfunction validCard(cardNumber) {\n\n  var cardType = null;\n  if (VisaCardnumber(cardNumber)) {\n    cardType = \"visa\";\n  } else if (MasterCardnumber(cardNumber)) {\n    cardType = \"mastercard\";\n  } else if (AmexCardnumber(cardNumber)) {\n    cardType = \"americanexpress\";\n  } else if (DiscoverCardnumber(cardNumber)) {\n    cardType = \"discover\";\n  } else if (DinerClubCardnumber(cardNumber)) {\n    cardType = \"dinerclub\";\n  } else if (JCBCardnumber(cardNumber)) {\n    cardType = \"jcb\";\n  }\n\n  // console.log('cardType: ', cardType);\n  if (!cardType) return false;\n\n  return true;\n}\n\n// To validate card expiration:\nfunction validateExpiryDate(s) {\n\n  // Check 2/2 digits format\n  if (!/\\d\\d\\/\\d\\d/.test(s)) {\n    return 'Expiry date format must be MM/YY';\n  }\n\n  // Check month is 1 to 12 inclusive\n  var b = s.split('/');\n  if (b[0] < 1 || b[0] > 12) {\n    return 'Expiry month must be from 00 to 12';\n  }\n\n  // Check is this month or later\n  var d = new Date()\n  var c = d.getFullYear() / 100 | 0 + '';\n  if (new Date(c + b[1], b[0], 1) < d) {\n    return 'Expiry date must be this month or later';\n  }\n\n  return true;\n}","import React, { Component } from 'react';\nimport { validate } from '../formValidation';\nimport axios from 'axios';\n\nconst imageUrl = 'https://cdna.artstation.com/p/assets/images/images/009/838/868/large/anna-emelyanova-bottle-3.jpg?1521148475';\n\nclass ContactComponent extends Component {\n\n    initialState = {\n      quantity: '',\n      total: '',\n      firstName: '',\n      lastName: '',\n      address: {\n        street1: '',\n        street2: '',\n        city: '',\n        state: '',\n        zip: '',\n      },\n      email: '',\n      phoneNumber: '',\n      payment: {\n        ccNum: '',\n        exp: '',\n      },\n      touched: {\n        quantity: false,\n        total: false,\n        firstName: false,\n        lastName: false,\n        phoneNumber: false,\n\n      },\n      exceedMaxQuantiy: ''\n    }\n    state = this.initialState;\n    errors = {};\n    successOrder = 'none-display';\n    badOrder = 'node-display';\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'quantity') {\n      this.setState({\n        [name]: value,\n        total: (49.99 * value).toString(),\n      })\n    } else if (Object.keys(this.state.address).includes(name)) {\n      this.setState({\n        address: { ...this.state.address, [name]: value },\n      })\n    } else if (Object.keys(this.state.payment).includes(name)) {\n      this.setState({\n        payment: { ...this.state.payment, [name]: value },\n      })\n    } else {\n      this.setState({\n        [name]: value,\n      })\n    }\n    this.successOrder = 'none-display';\n    this.badOrder = 'none-display';\n  }\n\n  handleFormReset = () => {\n    this.setState(() => this.initialState)\n  }\n\n  isErrors = (array) => array.every(el => el === \"\");\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const formData = {\n      firstName: this.state.firstName,\n      lastName: this.state.lastName,\n      email: this.state.email,\n      address: this.state.address,\n      phone: this.state.phoneNumber,\n      quantity: this.state.quantity,\n      total: this.state.total,\n      payment: this.state.payment\n    }\n\n    if (this.isErrors(Object.values(this.errors))) { //!flip this to undo testing\n      axios.post('/magic', formData)\n      .then(() => {\n        this.handleFormReset();\n        this.successOrder = 'success-order';\n        this.forceUpdate();\n      })\n      .catch(err => {\n        if (err.response.status === 400) {\n          this.badOrder = 'bad-order';\n          this.setState({\n            exceedMaxQuantiy: 'Order of more than 3 magic potions cannot be made by the same client for a given month!' \n          });\n        } else {\n          this.handleFormReset();\n          this.successOrder = 'success-order';\n        }\n        console.log(`Server Errors: ${err.response.status}:${err.response.statusMessage}`);\n      });\n    }\n  }\n\n  handleBlur = (field) => () => {\n    this.setState({\n      touched: { ...this.state.touched, [field]: true }\n    });\n  }\n  \n  render() {\n\n    this.errors = validate(\n      this.state, this.state.quantity, this.state.firstName, this.state.lastName, \n      this.state.address.street1, this.state.address.city, \n      this.state.address.state, this.state.address.zip,\n      this.state.email, this.state.phoneNumber, this.state.ccNum,\n      this.state.exp\n    );\n\n    return (\n      <div className='main'>\n        <form className='form' \n          onSubmit={this.handleSubmit}>\n          <div className='magic'>\n            <h3>Magic Potion</h3>\n            <div className='potion'>\n              <div className='img-div'>\n              <img src={imageUrl} height=\"150\" alt='potionImage'></img>\n              </div>\n              <div className='quantity'>\n                <label htmlFor=\"quantity\">Qty&nbsp;&nbsp;</label>\n                <input type=\"number\" id=\"quantity\" name=\"quantity\" max='3' required\n                  value={this.state.quantity}\n                  invalid={this.errors.quantity}\n                  onBlur={this.handleBlur('quantity')}\n                  onChange={this.handleChange}\n                >\n                </input>\n                <em className=\"form-errors\">{this.errors.quantity}</em>\n                <label htmlFor=\"total\">Total</label>\n                <input type='text' id=\"total\" name=\"total\" \n                  value={this.state.total} readOnly\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className='contact-info'>\n            <h4 className={this.successOrder}>Your order has been placed!</h4>\n            <h4 className={this.badOrder}>{this.state.exceedMaxQuantiy}</h4>\n            <h3>Contact | Billing Information</h3>\n            <div className='name'>\n              <input type='text/plain' name='firstName' placeholder='First Name'\n                value={this.state.firstName}\n                invalid={this.errors.firstName}\n                onBlur={this.handleBlur('firstName')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.firstName}</em>\n              <input type='text/plain' name='lastName' placeholder='Last Name'\n                value={this.state.lastName}\n                invalid={this.errors.lastName}\n                onBlur={this.handleBlur('lastName')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.lastName}</em>\n            </div>\n            \n            <div className='street1'>\n              <input type='text/plain' name='street1' \n              placeholder='Address Line 1'\n                value={this.state.address.street1}\n                invalid={this.errors.add1}\n                onBlur={this.handleBlur('street1')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.add1}</em>\n              <input type='text/plain' name='street2' \n                placeholder='Address Line 2'\n                value={this.state.address.street2}\n                onChange={this.handleChange} />\n            </div>\n            <div className='street2'>\n              <input type='text/plain' name='city' \n                placeholder='City'\n                value={this.state.address.city}\n                invalid={this.errors.city}\n                onBlur={this.handleBlur('city')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.city}</em>\n              <select name='state'\n                value={this.state.address.state}\n                invalid={this.errors.state}\n                onBlur={this.handleBlur('state')}\n                onChange={this.handleChange} >\n                <option value=''>State</option>\n                <option value='CA'>CA</option>\n                <option value='NY'>NY</option>\n                <option value='MO'>MO</option>\n                <option value='NJ'>NJ</option>\n                <option value='MA'>MA</option>\n              </select>\n              <em className='form-errors'>{this.errors.state}</em>\n              <input type='text/plain' name='zip' \n                placeholder='Zip Code'\n                value={this.state.address.zip}\n                invalid={this.errors.zip}\n                onBlur={this.handleBlur('zip')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.zip}</em>\n            </div>\n            <div className='contact'>\n              <input type='text/plain' name='email' \n                placeholder='Email Address'\n                value={this.state.email}\n                invalid={this.errors.email}\n                onBlur={this.handleBlur('email')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.email}</em>\n              <input type='text/plain' name='phoneNumber' \n                placeholder='Phone Number'\n                value={this.state.phoneNumber}\n                invalid={this.errors.phoneNumber}\n                onBlur={this.handleBlur('phoneNumber')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.phoneNumber}</em>\n            </div>\n            \n            <div className='creditCard'>\n              <input type='text/plain' name='ccNum' required\n                placeholder='Credit Card Number'\n                value={this.state.payment.ccNum}\n                invalid={this.errors.ccNum}\n                onBlur={this.handleBlur('ccNum')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.ccNum}</em>\n              <input type='text/plain' name='exp' \n                placeholder='mm/yy' required\n                value={this.state.payment.exp}\n                invalid={this.errors.exp}\n                onBlur={this.handleBlur('exp')}\n                onChange={this.handleChange} />\n                <em className='form-errors'>{this.errors.exp}</em>\n            </div>\n            <div className='submitButton'>\n              <input type='submit' />\n            </div>\n          </div>\n        </form>\n      </div>  \n    )\n  };\n}\n\nexport default ContactComponent;","import React from 'react';\nimport ContactComponent from './Contact';\n\nfunction MagicPotion() {\n  return (\n    <div>\n      <ContactComponent />\n    </div>\n  )\n}\nexport default MagicPotion;","import React from 'react';\nimport './App.css';\nimport MagicPotion from './components/MagicPotionContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Curology Magic Potion<span><img alt=\"\" height=\"50px\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRUM5k7XvVB87iuS7oepkQppa4H6nI4pL4n9g&usqp=CAU\"></img></span></h2>\n      <MagicPotion />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}